-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Syntax.Nameless.Par
  ( happyError
  , myLexer
  , pListExpr
  , pExpr
  ) where

import Prelude

import qualified Syntax.Nameless.Abs
import Syntax.Nameless.Lex

}

%name pListExpr ListExpr
%name pExpr Expr
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('        { PT _ (TS _ 1)  }
  ')'        { PT _ (TS _ 2)  }
  ','        { PT _ (TS _ 3)  }
  ';'        { PT _ (TS _ 4)  }
  '='        { PT _ (TS _ 5)  }
  '=>'       { PT _ (TS _ 6)  }
  'apply'    { PT _ (TS _ 7)  }
  'else'     { PT _ (TS _ 8)  }
  'false'    { PT _ (TS _ 9)  }
  'function' { PT _ (TS _ 10) }
  'if'       { PT _ (TS _ 11) }
  'iszero'   { PT _ (TS _ 12) }
  'macro'    { PT _ (TS _ 13) }
  'pred'     { PT _ (TS _ 14) }
  'print'    { PT _ (TS _ 15) }
  'succ'     { PT _ (TS _ 16) }
  'then'     { PT _ (TS _ 17) }
  'true'     { PT _ (TS _ 18) }
  '{'        { PT _ (TS _ 19) }
  '}'        { PT _ (TS _ 20) }
  L_Ident    { PT _ (TV $$)   }
  L_integ    { PT _ (TI $$)   }

%%

Ident :: { Syntax.Nameless.Abs.Ident }
Ident  : L_Ident { Syntax.Nameless.Abs.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

ListExpr :: { [Syntax.Nameless.Abs.Expr] }
ListExpr
  : {- empty -} { [] }
  | Expr { (:[]) $1 }
  | Expr ',' ListExpr { (:) $1 $3 }

Expr :: { Syntax.Nameless.Abs.Expr }
Expr
  : 'if' Expr 'then' Expr 'else' Expr { Syntax.Nameless.Abs.If $2 $4 $6 }
  | 'print' Expr ';' Expr { Syntax.Nameless.Abs.Print $2 $4 }
  | '=' Expr ';' Expr { Syntax.Nameless.Abs.Assignment $2 $4 }
  | 'function' '=>' '{' Expr '}' { Syntax.Nameless.Abs.Abstraction $4 }
  | 'macro' '=>' '{' Expr '}' { Syntax.Nameless.Abs.LazyAbstraction $4 }
  | 'apply' Expr '(' ListExpr ')' { Syntax.Nameless.Abs.Application $2 $4 }
  | 'succ' Expr { Syntax.Nameless.Abs.Succ $2 }
  | 'pred' Expr { Syntax.Nameless.Abs.Pred $2 }
  | 'iszero' Expr { Syntax.Nameless.Abs.IsZero $2 }
  | 'true' { Syntax.Nameless.Abs.ConstTrue }
  | 'false' { Syntax.Nameless.Abs.ConstFalse }
  | Integer { Syntax.Nameless.Abs.ConstInteger $1 }
  | Ident { Syntax.Nameless.Abs.FreeVar $1 }
  | Integer { Syntax.Nameless.Abs.BoundVar $1 }
  | '(' Expr ')' { $2 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

