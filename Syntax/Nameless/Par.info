-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Syntax/Nameless/Par.y
-----------------------------------------------------------------------------

state 5 contains 8 reduce/reduce conflicts.

rule 18 is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pListExpr -> ListExpr                       (0)
	%start_pExpr -> Expr                               (1)
	Ident -> L_Ident                                   (2)
	Integer -> L_integ                                 (3)
	ListExpr ->                                        (4)
	ListExpr -> Expr                                   (5)
	ListExpr -> Expr ',' ListExpr                      (6)
	Expr -> 'if' Expr 'then' Expr 'else' Expr          (7)
	Expr -> 'print' Expr ';' Expr                      (8)
	Expr -> '=' Expr ';' Expr                          (9)
	Expr -> 'function' '=>' '{' Expr '}'               (10)
	Expr -> 'macro' '=>' '{' Expr '}'                  (11)
	Expr -> 'apply' Expr '(' ListExpr ')'              (12)
	Expr -> 'succ' Expr                                (13)
	Expr -> 'pred' Expr                                (14)
	Expr -> 'iszero' Expr                              (15)
	Expr -> 'true'                                     (16)
	Expr -> 'false'                                    (17)
	Expr -> Integer                                    (18)
	Expr -> Ident                                      (19)
	Expr -> Integer                                    (20)
	Expr -> '(' Expr ')'                               (21)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	','            { PT _ (TS _ 3) }
	';'            { PT _ (TS _ 4) }
	'='            { PT _ (TS _ 5) }
	'=>'           { PT _ (TS _ 6) }
	'apply'        { PT _ (TS _ 7) }
	'else'         { PT _ (TS _ 8) }
	'false'        { PT _ (TS _ 9) }
	'function'     { PT _ (TS _ 10) }
	'if'           { PT _ (TS _ 11) }
	'iszero'       { PT _ (TS _ 12) }
	'macro'        { PT _ (TS _ 13) }
	'pred'         { PT _ (TS _ 14) }
	'print'        { PT _ (TS _ 15) }
	'succ'         { PT _ (TS _ 16) }
	'then'         { PT _ (TS _ 17) }
	'true'         { PT _ (TS _ 18) }
	'{'            { PT _ (TS _ 19) }
	'}'            { PT _ (TS _ 20) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pListExpr rule  0
	%start_pExpr    rule  1
	Ident           rule  2
	Integer         rule  3
	ListExpr        rules 4, 5, 6
	Expr            rules 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pListExpr -> . ListExpr                      (rule 0)

	'('            shift, and enter state 7
	'='            shift, and enter state 8
	'apply'        shift, and enter state 9
	'false'        shift, and enter state 10
	'function'     shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'macro'        shift, and enter state 14
	'pred'         shift, and enter state 15
	'print'        shift, and enter state 16
	'succ'         shift, and enter state 17
	'true'         shift, and enter state 18
	L_Ident        shift, and enter state 3
	L_integ        shift, and enter state 19
	%eof           reduce using rule 4

	Ident          goto state 4
	Integer        goto state 5
	ListExpr       goto state 20
	Expr           goto state 21

State 1

	%start_pExpr -> . Expr                              (rule 1)

	'('            shift, and enter state 7
	'='            shift, and enter state 8
	'apply'        shift, and enter state 9
	'false'        shift, and enter state 10
	'function'     shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'macro'        shift, and enter state 14
	'pred'         shift, and enter state 15
	'print'        shift, and enter state 16
	'succ'         shift, and enter state 17
	'true'         shift, and enter state 18
	L_Ident        shift, and enter state 3
	L_integ        shift, and enter state 19

	Ident          goto state 4
	Integer        goto state 5
	Expr           goto state 6

State 2

	Ident -> . L_Ident                                  (rule 2)

	L_Ident        shift, and enter state 3


State 3

	Ident -> L_Ident .                                  (rule 2)

	'('            reduce using rule 2
	')'            reduce using rule 2
	','            reduce using rule 2
	';'            reduce using rule 2
	'else'         reduce using rule 2
	'then'         reduce using rule 2
	'}'            reduce using rule 2
	%eof           reduce using rule 2


State 4

	Expr -> Ident .                                     (rule 19)

	'('            reduce using rule 19
	')'            reduce using rule 19
	','            reduce using rule 19
	';'            reduce using rule 19
	'else'         reduce using rule 19
	'then'         reduce using rule 19
	'}'            reduce using rule 19
	%eof           reduce using rule 19


State 5

	Expr -> Integer .                                   (rule 18)
	Expr -> Integer .                                   (rule 20)

	'('            reduce using rule 20
			(reduce using rule 18)

	')'            reduce using rule 20
			(reduce using rule 18)

	','            reduce using rule 20
			(reduce using rule 18)

	';'            reduce using rule 20
			(reduce using rule 18)

	'else'         reduce using rule 20
			(reduce using rule 18)

	'then'         reduce using rule 20
			(reduce using rule 18)

	'}'            reduce using rule 20
			(reduce using rule 18)

	%eof           reduce using rule 20
			(reduce using rule 18)



State 6

	%start_pExpr -> Expr .                              (rule 1)

	%eof           accept


State 7

	Expr -> '(' . Expr ')'                              (rule 21)

	'('            shift, and enter state 7
	'='            shift, and enter state 8
	'apply'        shift, and enter state 9
	'false'        shift, and enter state 10
	'function'     shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'macro'        shift, and enter state 14
	'pred'         shift, and enter state 15
	'print'        shift, and enter state 16
	'succ'         shift, and enter state 17
	'true'         shift, and enter state 18
	L_Ident        shift, and enter state 3
	L_integ        shift, and enter state 19

	Ident          goto state 4
	Integer        goto state 5
	Expr           goto state 32

State 8

	Expr -> '=' . Expr ';' Expr                         (rule 9)

	'('            shift, and enter state 7
	'='            shift, and enter state 8
	'apply'        shift, and enter state 9
	'false'        shift, and enter state 10
	'function'     shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'macro'        shift, and enter state 14
	'pred'         shift, and enter state 15
	'print'        shift, and enter state 16
	'succ'         shift, and enter state 17
	'true'         shift, and enter state 18
	L_Ident        shift, and enter state 3
	L_integ        shift, and enter state 19

	Ident          goto state 4
	Integer        goto state 5
	Expr           goto state 31

State 9

	Expr -> 'apply' . Expr '(' ListExpr ')'             (rule 12)

	'('            shift, and enter state 7
	'='            shift, and enter state 8
	'apply'        shift, and enter state 9
	'false'        shift, and enter state 10
	'function'     shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'macro'        shift, and enter state 14
	'pred'         shift, and enter state 15
	'print'        shift, and enter state 16
	'succ'         shift, and enter state 17
	'true'         shift, and enter state 18
	L_Ident        shift, and enter state 3
	L_integ        shift, and enter state 19

	Ident          goto state 4
	Integer        goto state 5
	Expr           goto state 30

State 10

	Expr -> 'false' .                                   (rule 17)

	'('            reduce using rule 17
	')'            reduce using rule 17
	','            reduce using rule 17
	';'            reduce using rule 17
	'else'         reduce using rule 17
	'then'         reduce using rule 17
	'}'            reduce using rule 17
	%eof           reduce using rule 17


State 11

	Expr -> 'function' . '=>' '{' Expr '}'              (rule 10)

	'=>'           shift, and enter state 29


State 12

	Expr -> 'if' . Expr 'then' Expr 'else' Expr         (rule 7)

	'('            shift, and enter state 7
	'='            shift, and enter state 8
	'apply'        shift, and enter state 9
	'false'        shift, and enter state 10
	'function'     shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'macro'        shift, and enter state 14
	'pred'         shift, and enter state 15
	'print'        shift, and enter state 16
	'succ'         shift, and enter state 17
	'true'         shift, and enter state 18
	L_Ident        shift, and enter state 3
	L_integ        shift, and enter state 19

	Ident          goto state 4
	Integer        goto state 5
	Expr           goto state 28

State 13

	Expr -> 'iszero' . Expr                             (rule 15)

	'('            shift, and enter state 7
	'='            shift, and enter state 8
	'apply'        shift, and enter state 9
	'false'        shift, and enter state 10
	'function'     shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'macro'        shift, and enter state 14
	'pred'         shift, and enter state 15
	'print'        shift, and enter state 16
	'succ'         shift, and enter state 17
	'true'         shift, and enter state 18
	L_Ident        shift, and enter state 3
	L_integ        shift, and enter state 19

	Ident          goto state 4
	Integer        goto state 5
	Expr           goto state 27

State 14

	Expr -> 'macro' . '=>' '{' Expr '}'                 (rule 11)

	'=>'           shift, and enter state 26


State 15

	Expr -> 'pred' . Expr                               (rule 14)

	'('            shift, and enter state 7
	'='            shift, and enter state 8
	'apply'        shift, and enter state 9
	'false'        shift, and enter state 10
	'function'     shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'macro'        shift, and enter state 14
	'pred'         shift, and enter state 15
	'print'        shift, and enter state 16
	'succ'         shift, and enter state 17
	'true'         shift, and enter state 18
	L_Ident        shift, and enter state 3
	L_integ        shift, and enter state 19

	Ident          goto state 4
	Integer        goto state 5
	Expr           goto state 25

State 16

	Expr -> 'print' . Expr ';' Expr                     (rule 8)

	'('            shift, and enter state 7
	'='            shift, and enter state 8
	'apply'        shift, and enter state 9
	'false'        shift, and enter state 10
	'function'     shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'macro'        shift, and enter state 14
	'pred'         shift, and enter state 15
	'print'        shift, and enter state 16
	'succ'         shift, and enter state 17
	'true'         shift, and enter state 18
	L_Ident        shift, and enter state 3
	L_integ        shift, and enter state 19

	Ident          goto state 4
	Integer        goto state 5
	Expr           goto state 24

State 17

	Expr -> 'succ' . Expr                               (rule 13)

	'('            shift, and enter state 7
	'='            shift, and enter state 8
	'apply'        shift, and enter state 9
	'false'        shift, and enter state 10
	'function'     shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'macro'        shift, and enter state 14
	'pred'         shift, and enter state 15
	'print'        shift, and enter state 16
	'succ'         shift, and enter state 17
	'true'         shift, and enter state 18
	L_Ident        shift, and enter state 3
	L_integ        shift, and enter state 19

	Ident          goto state 4
	Integer        goto state 5
	Expr           goto state 23

State 18

	Expr -> 'true' .                                    (rule 16)

	'('            reduce using rule 16
	')'            reduce using rule 16
	','            reduce using rule 16
	';'            reduce using rule 16
	'else'         reduce using rule 16
	'then'         reduce using rule 16
	'}'            reduce using rule 16
	%eof           reduce using rule 16


State 19

	Integer -> L_integ .                                (rule 3)

	'('            reduce using rule 3
	')'            reduce using rule 3
	','            reduce using rule 3
	';'            reduce using rule 3
	'else'         reduce using rule 3
	'then'         reduce using rule 3
	'}'            reduce using rule 3
	%eof           reduce using rule 3


State 20

	%start_pListExpr -> ListExpr .                      (rule 0)

	%eof           accept


State 21

	ListExpr -> Expr .                                  (rule 5)
	ListExpr -> Expr . ',' ListExpr                     (rule 6)

	')'            reduce using rule 5
	','            shift, and enter state 22
	%eof           reduce using rule 5


State 22

	ListExpr -> Expr ',' . ListExpr                     (rule 6)

	'('            shift, and enter state 7
	')'            reduce using rule 4
	'='            shift, and enter state 8
	'apply'        shift, and enter state 9
	'false'        shift, and enter state 10
	'function'     shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'macro'        shift, and enter state 14
	'pred'         shift, and enter state 15
	'print'        shift, and enter state 16
	'succ'         shift, and enter state 17
	'true'         shift, and enter state 18
	L_Ident        shift, and enter state 3
	L_integ        shift, and enter state 19
	%eof           reduce using rule 4

	Ident          goto state 4
	Integer        goto state 5
	ListExpr       goto state 40
	Expr           goto state 21

State 23

	Expr -> 'succ' Expr .                               (rule 13)

	'('            reduce using rule 13
	')'            reduce using rule 13
	','            reduce using rule 13
	';'            reduce using rule 13
	'else'         reduce using rule 13
	'then'         reduce using rule 13
	'}'            reduce using rule 13
	%eof           reduce using rule 13


State 24

	Expr -> 'print' Expr . ';' Expr                     (rule 8)

	';'            shift, and enter state 39


State 25

	Expr -> 'pred' Expr .                               (rule 14)

	'('            reduce using rule 14
	')'            reduce using rule 14
	','            reduce using rule 14
	';'            reduce using rule 14
	'else'         reduce using rule 14
	'then'         reduce using rule 14
	'}'            reduce using rule 14
	%eof           reduce using rule 14


State 26

	Expr -> 'macro' '=>' . '{' Expr '}'                 (rule 11)

	'{'            shift, and enter state 38


State 27

	Expr -> 'iszero' Expr .                             (rule 15)

	'('            reduce using rule 15
	')'            reduce using rule 15
	','            reduce using rule 15
	';'            reduce using rule 15
	'else'         reduce using rule 15
	'then'         reduce using rule 15
	'}'            reduce using rule 15
	%eof           reduce using rule 15


State 28

	Expr -> 'if' Expr . 'then' Expr 'else' Expr         (rule 7)

	'then'         shift, and enter state 37


State 29

	Expr -> 'function' '=>' . '{' Expr '}'              (rule 10)

	'{'            shift, and enter state 36


State 30

	Expr -> 'apply' Expr . '(' ListExpr ')'             (rule 12)

	'('            shift, and enter state 35


State 31

	Expr -> '=' Expr . ';' Expr                         (rule 9)

	';'            shift, and enter state 34


State 32

	Expr -> '(' Expr . ')'                              (rule 21)

	')'            shift, and enter state 33


State 33

	Expr -> '(' Expr ')' .                              (rule 21)

	'('            reduce using rule 21
	')'            reduce using rule 21
	','            reduce using rule 21
	';'            reduce using rule 21
	'else'         reduce using rule 21
	'then'         reduce using rule 21
	'}'            reduce using rule 21
	%eof           reduce using rule 21


State 34

	Expr -> '=' Expr ';' . Expr                         (rule 9)

	'('            shift, and enter state 7
	'='            shift, and enter state 8
	'apply'        shift, and enter state 9
	'false'        shift, and enter state 10
	'function'     shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'macro'        shift, and enter state 14
	'pred'         shift, and enter state 15
	'print'        shift, and enter state 16
	'succ'         shift, and enter state 17
	'true'         shift, and enter state 18
	L_Ident        shift, and enter state 3
	L_integ        shift, and enter state 19

	Ident          goto state 4
	Integer        goto state 5
	Expr           goto state 46

State 35

	Expr -> 'apply' Expr '(' . ListExpr ')'             (rule 12)

	'('            shift, and enter state 7
	')'            reduce using rule 4
	'='            shift, and enter state 8
	'apply'        shift, and enter state 9
	'false'        shift, and enter state 10
	'function'     shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'macro'        shift, and enter state 14
	'pred'         shift, and enter state 15
	'print'        shift, and enter state 16
	'succ'         shift, and enter state 17
	'true'         shift, and enter state 18
	L_Ident        shift, and enter state 3
	L_integ        shift, and enter state 19

	Ident          goto state 4
	Integer        goto state 5
	ListExpr       goto state 45
	Expr           goto state 21

State 36

	Expr -> 'function' '=>' '{' . Expr '}'              (rule 10)

	'('            shift, and enter state 7
	'='            shift, and enter state 8
	'apply'        shift, and enter state 9
	'false'        shift, and enter state 10
	'function'     shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'macro'        shift, and enter state 14
	'pred'         shift, and enter state 15
	'print'        shift, and enter state 16
	'succ'         shift, and enter state 17
	'true'         shift, and enter state 18
	L_Ident        shift, and enter state 3
	L_integ        shift, and enter state 19

	Ident          goto state 4
	Integer        goto state 5
	Expr           goto state 44

State 37

	Expr -> 'if' Expr 'then' . Expr 'else' Expr         (rule 7)

	'('            shift, and enter state 7
	'='            shift, and enter state 8
	'apply'        shift, and enter state 9
	'false'        shift, and enter state 10
	'function'     shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'macro'        shift, and enter state 14
	'pred'         shift, and enter state 15
	'print'        shift, and enter state 16
	'succ'         shift, and enter state 17
	'true'         shift, and enter state 18
	L_Ident        shift, and enter state 3
	L_integ        shift, and enter state 19

	Ident          goto state 4
	Integer        goto state 5
	Expr           goto state 43

State 38

	Expr -> 'macro' '=>' '{' . Expr '}'                 (rule 11)

	'('            shift, and enter state 7
	'='            shift, and enter state 8
	'apply'        shift, and enter state 9
	'false'        shift, and enter state 10
	'function'     shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'macro'        shift, and enter state 14
	'pred'         shift, and enter state 15
	'print'        shift, and enter state 16
	'succ'         shift, and enter state 17
	'true'         shift, and enter state 18
	L_Ident        shift, and enter state 3
	L_integ        shift, and enter state 19

	Ident          goto state 4
	Integer        goto state 5
	Expr           goto state 42

State 39

	Expr -> 'print' Expr ';' . Expr                     (rule 8)

	'('            shift, and enter state 7
	'='            shift, and enter state 8
	'apply'        shift, and enter state 9
	'false'        shift, and enter state 10
	'function'     shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'macro'        shift, and enter state 14
	'pred'         shift, and enter state 15
	'print'        shift, and enter state 16
	'succ'         shift, and enter state 17
	'true'         shift, and enter state 18
	L_Ident        shift, and enter state 3
	L_integ        shift, and enter state 19

	Ident          goto state 4
	Integer        goto state 5
	Expr           goto state 41

State 40

	ListExpr -> Expr ',' ListExpr .                     (rule 6)

	')'            reduce using rule 6
	%eof           reduce using rule 6


State 41

	Expr -> 'print' Expr ';' Expr .                     (rule 8)

	'('            reduce using rule 8
	')'            reduce using rule 8
	','            reduce using rule 8
	';'            reduce using rule 8
	'else'         reduce using rule 8
	'then'         reduce using rule 8
	'}'            reduce using rule 8
	%eof           reduce using rule 8


State 42

	Expr -> 'macro' '=>' '{' Expr . '}'                 (rule 11)

	'}'            shift, and enter state 50


State 43

	Expr -> 'if' Expr 'then' Expr . 'else' Expr         (rule 7)

	'else'         shift, and enter state 49


State 44

	Expr -> 'function' '=>' '{' Expr . '}'              (rule 10)

	'}'            shift, and enter state 48


State 45

	Expr -> 'apply' Expr '(' ListExpr . ')'             (rule 12)

	')'            shift, and enter state 47


State 46

	Expr -> '=' Expr ';' Expr .                         (rule 9)

	'('            reduce using rule 9
	')'            reduce using rule 9
	','            reduce using rule 9
	';'            reduce using rule 9
	'else'         reduce using rule 9
	'then'         reduce using rule 9
	'}'            reduce using rule 9
	%eof           reduce using rule 9


State 47

	Expr -> 'apply' Expr '(' ListExpr ')' .             (rule 12)

	'('            reduce using rule 12
	')'            reduce using rule 12
	','            reduce using rule 12
	';'            reduce using rule 12
	'else'         reduce using rule 12
	'then'         reduce using rule 12
	'}'            reduce using rule 12
	%eof           reduce using rule 12


State 48

	Expr -> 'function' '=>' '{' Expr '}' .              (rule 10)

	'('            reduce using rule 10
	')'            reduce using rule 10
	','            reduce using rule 10
	';'            reduce using rule 10
	'else'         reduce using rule 10
	'then'         reduce using rule 10
	'}'            reduce using rule 10
	%eof           reduce using rule 10


State 49

	Expr -> 'if' Expr 'then' Expr 'else' . Expr         (rule 7)

	'('            shift, and enter state 7
	'='            shift, and enter state 8
	'apply'        shift, and enter state 9
	'false'        shift, and enter state 10
	'function'     shift, and enter state 11
	'if'           shift, and enter state 12
	'iszero'       shift, and enter state 13
	'macro'        shift, and enter state 14
	'pred'         shift, and enter state 15
	'print'        shift, and enter state 16
	'succ'         shift, and enter state 17
	'true'         shift, and enter state 18
	L_Ident        shift, and enter state 3
	L_integ        shift, and enter state 19

	Ident          goto state 4
	Integer        goto state 5
	Expr           goto state 51

State 50

	Expr -> 'macro' '=>' '{' Expr '}' .                 (rule 11)

	'('            reduce using rule 11
	')'            reduce using rule 11
	','            reduce using rule 11
	';'            reduce using rule 11
	'else'         reduce using rule 11
	'then'         reduce using rule 11
	'}'            reduce using rule 11
	%eof           reduce using rule 11


State 51

	Expr -> 'if' Expr 'then' Expr 'else' Expr .         (rule 7)

	'('            reduce using rule 7
	')'            reduce using rule 7
	','            reduce using rule 7
	';'            reduce using rule 7
	'else'         reduce using rule 7
	'then'         reduce using rule 7
	'}'            reduce using rule 7
	%eof           reduce using rule 7


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 22
Number of terminals: 22
Number of non-terminals: 6
Number of states: 52
