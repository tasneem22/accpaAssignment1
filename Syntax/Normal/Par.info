-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Syntax/Normal/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pListExpr1 -> ListExpr1                     (0)
	%start_pExpr1 -> Expr1                             (1)
	%start_pExpr -> Expr                               (2)
	%start_pExpr2 -> Expr2                             (3)
	%start_pExpr3 -> Expr3                             (4)
	Ident -> L_Ident                                   (5)
	Integer -> L_integ                                 (6)
	ListExpr1 ->                                       (7)
	ListExpr1 -> Expr1                                 (8)
	ListExpr1 -> Expr1 ',' ListExpr1                   (9)
	Expr1 -> 'if' Expr2 'then' Expr2 'else' Expr2      (10)
	Expr1 -> 'function' Ident '=>' '{' Expr '}'        (11)
	Expr1 -> 'macro' Ident '=>' '{' Expr '}'           (12)
	Expr1 -> Expr2                                     (13)
	Expr -> 'print' Expr1 ';' Expr                     (14)
	Expr -> Ident '=' Expr1 ';' Expr                   (15)
	Expr -> Expr1                                      (16)
	Expr2 -> 'apply' Expr3 '(' ListExpr1 ')'           (17)
	Expr2 -> 'succ' Expr3                              (18)
	Expr2 -> 'pred' Expr3                              (19)
	Expr2 -> 'iszero' Expr3                            (20)
	Expr2 -> Expr3                                     (21)
	Expr3 -> 'true'                                    (22)
	Expr3 -> 'false'                                   (23)
	Expr3 -> Integer                                   (24)
	Expr3 -> Ident                                     (25)
	Expr3 -> '(' Expr ')'                              (26)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	','            { PT _ (TS _ 3) }
	';'            { PT _ (TS _ 4) }
	'='            { PT _ (TS _ 5) }
	'=>'           { PT _ (TS _ 6) }
	'apply'        { PT _ (TS _ 7) }
	'else'         { PT _ (TS _ 8) }
	'false'        { PT _ (TS _ 9) }
	'function'     { PT _ (TS _ 10) }
	'if'           { PT _ (TS _ 11) }
	'iszero'       { PT _ (TS _ 12) }
	'macro'        { PT _ (TS _ 13) }
	'pred'         { PT _ (TS _ 14) }
	'print'        { PT _ (TS _ 15) }
	'succ'         { PT _ (TS _ 16) }
	'then'         { PT _ (TS _ 17) }
	'true'         { PT _ (TS _ 18) }
	'{'            { PT _ (TS _ 19) }
	'}'            { PT _ (TS _ 20) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pListExpr1 rule  0
	%start_pExpr1   rule  1
	%start_pExpr    rule  2
	%start_pExpr2   rule  3
	%start_pExpr3   rule  4
	Ident           rule  5
	Integer         rule  6
	ListExpr1       rules 7, 8, 9
	Expr1           rules 10, 11, 12, 13
	Expr            rules 14, 15, 16
	Expr2           rules 17, 18, 19, 20, 21
	Expr3           rules 22, 23, 24, 25, 26

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pListExpr1 -> . ListExpr1                    (rule 0)

	'('            shift, and enter state 10
	'apply'        shift, and enter state 16
	'false'        shift, and enter state 11
	'function'     shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 17
	'macro'        shift, and enter state 26
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 12
	L_Ident        shift, and enter state 6
	L_integ        shift, and enter state 13
	%eof           reduce using rule 7

	Ident          goto state 7
	Integer        goto state 8
	ListExpr1      goto state 29
	Expr1          goto state 30
	Expr2          goto state 23
	Expr3          goto state 15

State 1

	%start_pExpr1 -> . Expr1                            (rule 1)

	'('            shift, and enter state 10
	'apply'        shift, and enter state 16
	'false'        shift, and enter state 11
	'function'     shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 17
	'macro'        shift, and enter state 26
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 12
	L_Ident        shift, and enter state 6
	L_integ        shift, and enter state 13

	Ident          goto state 7
	Integer        goto state 8
	Expr1          goto state 28
	Expr2          goto state 23
	Expr3          goto state 15

State 2

	%start_pExpr -> . Expr                              (rule 2)

	'('            shift, and enter state 10
	'apply'        shift, and enter state 16
	'false'        shift, and enter state 11
	'function'     shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 17
	'macro'        shift, and enter state 26
	'pred'         shift, and enter state 18
	'print'        shift, and enter state 27
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 12
	L_Ident        shift, and enter state 6
	L_integ        shift, and enter state 13

	Ident          goto state 20
	Integer        goto state 8
	Expr1          goto state 21
	Expr           goto state 22
	Expr2          goto state 23
	Expr3          goto state 15

State 3

	%start_pExpr2 -> . Expr2                            (rule 3)

	'('            shift, and enter state 10
	'apply'        shift, and enter state 16
	'false'        shift, and enter state 11
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 12
	L_Ident        shift, and enter state 6
	L_integ        shift, and enter state 13

	Ident          goto state 7
	Integer        goto state 8
	Expr2          goto state 14
	Expr3          goto state 15

State 4

	%start_pExpr3 -> . Expr3                            (rule 4)

	'('            shift, and enter state 10
	'false'        shift, and enter state 11
	'true'         shift, and enter state 12
	L_Ident        shift, and enter state 6
	L_integ        shift, and enter state 13

	Ident          goto state 7
	Integer        goto state 8
	Expr3          goto state 9

State 5

	Ident -> . L_Ident                                  (rule 5)

	L_Ident        shift, and enter state 6


State 6

	Ident -> L_Ident .                                  (rule 5)

	'('            reduce using rule 5
	')'            reduce using rule 5
	','            reduce using rule 5
	';'            reduce using rule 5
	'='            reduce using rule 5
	'=>'           reduce using rule 5
	'else'         reduce using rule 5
	'then'         reduce using rule 5
	'}'            reduce using rule 5
	%eof           reduce using rule 5


State 7

	Expr3 -> Ident .                                    (rule 25)

	'('            reduce using rule 25
	')'            reduce using rule 25
	','            reduce using rule 25
	';'            reduce using rule 25
	'else'         reduce using rule 25
	'then'         reduce using rule 25
	'}'            reduce using rule 25
	%eof           reduce using rule 25


State 8

	Expr3 -> Integer .                                  (rule 24)

	'('            reduce using rule 24
	')'            reduce using rule 24
	','            reduce using rule 24
	';'            reduce using rule 24
	'else'         reduce using rule 24
	'then'         reduce using rule 24
	'}'            reduce using rule 24
	%eof           reduce using rule 24


State 9

	%start_pExpr3 -> Expr3 .                            (rule 4)

	%eof           accept


State 10

	Expr3 -> '(' . Expr ')'                             (rule 26)

	'('            shift, and enter state 10
	'apply'        shift, and enter state 16
	'false'        shift, and enter state 11
	'function'     shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 17
	'macro'        shift, and enter state 26
	'pred'         shift, and enter state 18
	'print'        shift, and enter state 27
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 12
	L_Ident        shift, and enter state 6
	L_integ        shift, and enter state 13

	Ident          goto state 20
	Integer        goto state 8
	Expr1          goto state 21
	Expr           goto state 41
	Expr2          goto state 23
	Expr3          goto state 15

State 11

	Expr3 -> 'false' .                                  (rule 23)

	'('            reduce using rule 23
	')'            reduce using rule 23
	','            reduce using rule 23
	';'            reduce using rule 23
	'else'         reduce using rule 23
	'then'         reduce using rule 23
	'}'            reduce using rule 23
	%eof           reduce using rule 23


State 12

	Expr3 -> 'true' .                                   (rule 22)

	'('            reduce using rule 22
	')'            reduce using rule 22
	','            reduce using rule 22
	';'            reduce using rule 22
	'else'         reduce using rule 22
	'then'         reduce using rule 22
	'}'            reduce using rule 22
	%eof           reduce using rule 22


State 13

	Integer -> L_integ .                                (rule 6)

	'('            reduce using rule 6
	')'            reduce using rule 6
	','            reduce using rule 6
	';'            reduce using rule 6
	'else'         reduce using rule 6
	'then'         reduce using rule 6
	'}'            reduce using rule 6
	%eof           reduce using rule 6


State 14

	%start_pExpr2 -> Expr2 .                            (rule 3)

	%eof           accept


State 15

	Expr2 -> Expr3 .                                    (rule 21)

	')'            reduce using rule 21
	','            reduce using rule 21
	';'            reduce using rule 21
	'else'         reduce using rule 21
	'then'         reduce using rule 21
	'}'            reduce using rule 21
	%eof           reduce using rule 21


State 16

	Expr2 -> 'apply' . Expr3 '(' ListExpr1 ')'          (rule 17)

	'('            shift, and enter state 10
	'false'        shift, and enter state 11
	'true'         shift, and enter state 12
	L_Ident        shift, and enter state 6
	L_integ        shift, and enter state 13

	Ident          goto state 7
	Integer        goto state 8
	Expr3          goto state 40

State 17

	Expr2 -> 'iszero' . Expr3                           (rule 20)

	'('            shift, and enter state 10
	'false'        shift, and enter state 11
	'true'         shift, and enter state 12
	L_Ident        shift, and enter state 6
	L_integ        shift, and enter state 13

	Ident          goto state 7
	Integer        goto state 8
	Expr3          goto state 39

State 18

	Expr2 -> 'pred' . Expr3                             (rule 19)

	'('            shift, and enter state 10
	'false'        shift, and enter state 11
	'true'         shift, and enter state 12
	L_Ident        shift, and enter state 6
	L_integ        shift, and enter state 13

	Ident          goto state 7
	Integer        goto state 8
	Expr3          goto state 38

State 19

	Expr2 -> 'succ' . Expr3                             (rule 18)

	'('            shift, and enter state 10
	'false'        shift, and enter state 11
	'true'         shift, and enter state 12
	L_Ident        shift, and enter state 6
	L_integ        shift, and enter state 13

	Ident          goto state 7
	Integer        goto state 8
	Expr3          goto state 37

State 20

	Expr -> Ident . '=' Expr1 ';' Expr                  (rule 15)
	Expr3 -> Ident .                                    (rule 25)

	')'            reduce using rule 25
	'='            shift, and enter state 36
	'}'            reduce using rule 25
	%eof           reduce using rule 25


State 21

	Expr -> Expr1 .                                     (rule 16)

	')'            reduce using rule 16
	'}'            reduce using rule 16
	%eof           reduce using rule 16


State 22

	%start_pExpr -> Expr .                              (rule 2)

	%eof           accept


State 23

	Expr1 -> Expr2 .                                    (rule 13)

	')'            reduce using rule 13
	','            reduce using rule 13
	';'            reduce using rule 13
	'}'            reduce using rule 13
	%eof           reduce using rule 13


State 24

	Expr1 -> 'function' . Ident '=>' '{' Expr '}'       (rule 11)

	L_Ident        shift, and enter state 6

	Ident          goto state 35

State 25

	Expr1 -> 'if' . Expr2 'then' Expr2 'else' Expr2     (rule 10)

	'('            shift, and enter state 10
	'apply'        shift, and enter state 16
	'false'        shift, and enter state 11
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 12
	L_Ident        shift, and enter state 6
	L_integ        shift, and enter state 13

	Ident          goto state 7
	Integer        goto state 8
	Expr2          goto state 34
	Expr3          goto state 15

State 26

	Expr1 -> 'macro' . Ident '=>' '{' Expr '}'          (rule 12)

	L_Ident        shift, and enter state 6

	Ident          goto state 33

State 27

	Expr -> 'print' . Expr1 ';' Expr                    (rule 14)

	'('            shift, and enter state 10
	'apply'        shift, and enter state 16
	'false'        shift, and enter state 11
	'function'     shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 17
	'macro'        shift, and enter state 26
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 12
	L_Ident        shift, and enter state 6
	L_integ        shift, and enter state 13

	Ident          goto state 7
	Integer        goto state 8
	Expr1          goto state 32
	Expr2          goto state 23
	Expr3          goto state 15

State 28

	%start_pExpr1 -> Expr1 .                            (rule 1)

	%eof           accept


State 29

	%start_pListExpr1 -> ListExpr1 .                    (rule 0)

	%eof           accept


State 30

	ListExpr1 -> Expr1 .                                (rule 8)
	ListExpr1 -> Expr1 . ',' ListExpr1                  (rule 9)

	')'            reduce using rule 8
	','            shift, and enter state 31
	%eof           reduce using rule 8


State 31

	ListExpr1 -> Expr1 ',' . ListExpr1                  (rule 9)

	'('            shift, and enter state 10
	')'            reduce using rule 7
	'apply'        shift, and enter state 16
	'false'        shift, and enter state 11
	'function'     shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 17
	'macro'        shift, and enter state 26
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 12
	L_Ident        shift, and enter state 6
	L_integ        shift, and enter state 13
	%eof           reduce using rule 7

	Ident          goto state 7
	Integer        goto state 8
	ListExpr1      goto state 49
	Expr1          goto state 30
	Expr2          goto state 23
	Expr3          goto state 15

State 32

	Expr -> 'print' Expr1 . ';' Expr                    (rule 14)

	';'            shift, and enter state 48


State 33

	Expr1 -> 'macro' Ident . '=>' '{' Expr '}'          (rule 12)

	'=>'           shift, and enter state 47


State 34

	Expr1 -> 'if' Expr2 . 'then' Expr2 'else' Expr2     (rule 10)

	'then'         shift, and enter state 46


State 35

	Expr1 -> 'function' Ident . '=>' '{' Expr '}'       (rule 11)

	'=>'           shift, and enter state 45


State 36

	Expr -> Ident '=' . Expr1 ';' Expr                  (rule 15)

	'('            shift, and enter state 10
	'apply'        shift, and enter state 16
	'false'        shift, and enter state 11
	'function'     shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 17
	'macro'        shift, and enter state 26
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 12
	L_Ident        shift, and enter state 6
	L_integ        shift, and enter state 13

	Ident          goto state 7
	Integer        goto state 8
	Expr1          goto state 44
	Expr2          goto state 23
	Expr3          goto state 15

State 37

	Expr2 -> 'succ' Expr3 .                             (rule 18)

	')'            reduce using rule 18
	','            reduce using rule 18
	';'            reduce using rule 18
	'else'         reduce using rule 18
	'then'         reduce using rule 18
	'}'            reduce using rule 18
	%eof           reduce using rule 18


State 38

	Expr2 -> 'pred' Expr3 .                             (rule 19)

	')'            reduce using rule 19
	','            reduce using rule 19
	';'            reduce using rule 19
	'else'         reduce using rule 19
	'then'         reduce using rule 19
	'}'            reduce using rule 19
	%eof           reduce using rule 19


State 39

	Expr2 -> 'iszero' Expr3 .                           (rule 20)

	')'            reduce using rule 20
	','            reduce using rule 20
	';'            reduce using rule 20
	'else'         reduce using rule 20
	'then'         reduce using rule 20
	'}'            reduce using rule 20
	%eof           reduce using rule 20


State 40

	Expr2 -> 'apply' Expr3 . '(' ListExpr1 ')'          (rule 17)

	'('            shift, and enter state 43


State 41

	Expr3 -> '(' Expr . ')'                             (rule 26)

	')'            shift, and enter state 42


State 42

	Expr3 -> '(' Expr ')' .                             (rule 26)

	'('            reduce using rule 26
	')'            reduce using rule 26
	','            reduce using rule 26
	';'            reduce using rule 26
	'else'         reduce using rule 26
	'then'         reduce using rule 26
	'}'            reduce using rule 26
	%eof           reduce using rule 26


State 43

	Expr2 -> 'apply' Expr3 '(' . ListExpr1 ')'          (rule 17)

	'('            shift, and enter state 10
	')'            reduce using rule 7
	'apply'        shift, and enter state 16
	'false'        shift, and enter state 11
	'function'     shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 17
	'macro'        shift, and enter state 26
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 12
	L_Ident        shift, and enter state 6
	L_integ        shift, and enter state 13

	Ident          goto state 7
	Integer        goto state 8
	ListExpr1      goto state 55
	Expr1          goto state 30
	Expr2          goto state 23
	Expr3          goto state 15

State 44

	Expr -> Ident '=' Expr1 . ';' Expr                  (rule 15)

	';'            shift, and enter state 54


State 45

	Expr1 -> 'function' Ident '=>' . '{' Expr '}'       (rule 11)

	'{'            shift, and enter state 53


State 46

	Expr1 -> 'if' Expr2 'then' . Expr2 'else' Expr2     (rule 10)

	'('            shift, and enter state 10
	'apply'        shift, and enter state 16
	'false'        shift, and enter state 11
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 12
	L_Ident        shift, and enter state 6
	L_integ        shift, and enter state 13

	Ident          goto state 7
	Integer        goto state 8
	Expr2          goto state 52
	Expr3          goto state 15

State 47

	Expr1 -> 'macro' Ident '=>' . '{' Expr '}'          (rule 12)

	'{'            shift, and enter state 51


State 48

	Expr -> 'print' Expr1 ';' . Expr                    (rule 14)

	'('            shift, and enter state 10
	'apply'        shift, and enter state 16
	'false'        shift, and enter state 11
	'function'     shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 17
	'macro'        shift, and enter state 26
	'pred'         shift, and enter state 18
	'print'        shift, and enter state 27
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 12
	L_Ident        shift, and enter state 6
	L_integ        shift, and enter state 13

	Ident          goto state 20
	Integer        goto state 8
	Expr1          goto state 21
	Expr           goto state 50
	Expr2          goto state 23
	Expr3          goto state 15

State 49

	ListExpr1 -> Expr1 ',' ListExpr1 .                  (rule 9)

	')'            reduce using rule 9
	%eof           reduce using rule 9


State 50

	Expr -> 'print' Expr1 ';' Expr .                    (rule 14)

	')'            reduce using rule 14
	'}'            reduce using rule 14
	%eof           reduce using rule 14


State 51

	Expr1 -> 'macro' Ident '=>' '{' . Expr '}'          (rule 12)

	'('            shift, and enter state 10
	'apply'        shift, and enter state 16
	'false'        shift, and enter state 11
	'function'     shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 17
	'macro'        shift, and enter state 26
	'pred'         shift, and enter state 18
	'print'        shift, and enter state 27
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 12
	L_Ident        shift, and enter state 6
	L_integ        shift, and enter state 13

	Ident          goto state 20
	Integer        goto state 8
	Expr1          goto state 21
	Expr           goto state 60
	Expr2          goto state 23
	Expr3          goto state 15

State 52

	Expr1 -> 'if' Expr2 'then' Expr2 . 'else' Expr2     (rule 10)

	'else'         shift, and enter state 59


State 53

	Expr1 -> 'function' Ident '=>' '{' . Expr '}'       (rule 11)

	'('            shift, and enter state 10
	'apply'        shift, and enter state 16
	'false'        shift, and enter state 11
	'function'     shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 17
	'macro'        shift, and enter state 26
	'pred'         shift, and enter state 18
	'print'        shift, and enter state 27
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 12
	L_Ident        shift, and enter state 6
	L_integ        shift, and enter state 13

	Ident          goto state 20
	Integer        goto state 8
	Expr1          goto state 21
	Expr           goto state 58
	Expr2          goto state 23
	Expr3          goto state 15

State 54

	Expr -> Ident '=' Expr1 ';' . Expr                  (rule 15)

	'('            shift, and enter state 10
	'apply'        shift, and enter state 16
	'false'        shift, and enter state 11
	'function'     shift, and enter state 24
	'if'           shift, and enter state 25
	'iszero'       shift, and enter state 17
	'macro'        shift, and enter state 26
	'pred'         shift, and enter state 18
	'print'        shift, and enter state 27
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 12
	L_Ident        shift, and enter state 6
	L_integ        shift, and enter state 13

	Ident          goto state 20
	Integer        goto state 8
	Expr1          goto state 21
	Expr           goto state 57
	Expr2          goto state 23
	Expr3          goto state 15

State 55

	Expr2 -> 'apply' Expr3 '(' ListExpr1 . ')'          (rule 17)

	')'            shift, and enter state 56


State 56

	Expr2 -> 'apply' Expr3 '(' ListExpr1 ')' .          (rule 17)

	')'            reduce using rule 17
	','            reduce using rule 17
	';'            reduce using rule 17
	'else'         reduce using rule 17
	'then'         reduce using rule 17
	'}'            reduce using rule 17
	%eof           reduce using rule 17


State 57

	Expr -> Ident '=' Expr1 ';' Expr .                  (rule 15)

	')'            reduce using rule 15
	'}'            reduce using rule 15
	%eof           reduce using rule 15


State 58

	Expr1 -> 'function' Ident '=>' '{' Expr . '}'       (rule 11)

	'}'            shift, and enter state 63


State 59

	Expr1 -> 'if' Expr2 'then' Expr2 'else' . Expr2     (rule 10)

	'('            shift, and enter state 10
	'apply'        shift, and enter state 16
	'false'        shift, and enter state 11
	'iszero'       shift, and enter state 17
	'pred'         shift, and enter state 18
	'succ'         shift, and enter state 19
	'true'         shift, and enter state 12
	L_Ident        shift, and enter state 6
	L_integ        shift, and enter state 13

	Ident          goto state 7
	Integer        goto state 8
	Expr2          goto state 62
	Expr3          goto state 15

State 60

	Expr1 -> 'macro' Ident '=>' '{' Expr . '}'          (rule 12)

	'}'            shift, and enter state 61


State 61

	Expr1 -> 'macro' Ident '=>' '{' Expr '}' .          (rule 12)

	')'            reduce using rule 12
	','            reduce using rule 12
	';'            reduce using rule 12
	'}'            reduce using rule 12
	%eof           reduce using rule 12


State 62

	Expr1 -> 'if' Expr2 'then' Expr2 'else' Expr2 .     (rule 10)

	')'            reduce using rule 10
	','            reduce using rule 10
	';'            reduce using rule 10
	'}'            reduce using rule 10
	%eof           reduce using rule 10


State 63

	Expr1 -> 'function' Ident '=>' '{' Expr '}' .       (rule 11)

	')'            reduce using rule 11
	','            reduce using rule 11
	';'            reduce using rule 11
	'}'            reduce using rule 11
	%eof           reduce using rule 11


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 27
Number of terminals: 22
Number of non-terminals: 12
Number of states: 64
